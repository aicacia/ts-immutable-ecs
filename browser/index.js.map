{"version":3,"file":"index.js","sources":["../src/hierarchy/Children.ts","../src/hierarchy/Parent.ts","../src/hierarchy/PreviousParent.ts","../src/hierarchy/removeChildren.ts","../src/Entity.ts","../src/ResourceManager.ts","../src/ResourceClassManager.ts","../src/EntityBuilder.ts","../src/Query.ts","../src/World.ts","../src/hierarchy/parentUpdateSystem.ts","../src/hierarchy/hierarchyPlugin.ts"],"sourcesContent":["import { OrderedSet, Record } from \"immutable\";\nimport type { Entity } from \"../Entity\";\n\nexport class Children extends Record(\n  {\n    children: OrderedSet<Entity>(),\n  },\n  \"ecs.hierarchy.Children\"\n) {\n  static toString() {\n    return Children.displayName;\n  }\n}\n","import { Record } from \"immutable\";\nimport type { Entity } from \"../Entity\";\n\nexport class Parent extends Record(\n  {\n    entity: null as unknown as Entity,\n  },\n  \"ecs.hierarchy.Parent\"\n) {\n  static toString() {\n    return Parent.displayName;\n  }\n}\n","import { Record } from \"immutable\";\nimport type { Entity } from \"../Entity\";\n\nexport class PreviousParent extends Record(\n  {\n    entity: null as unknown as Entity,\n  },\n  \"ecs.hierarchy.PreviousParent\"\n) {\n  static toString() {\n    return PreviousParent.displayName;\n  }\n}\n","import type { Entity } from \"../Entity\";\nimport type { World } from \"../World\";\nimport { Children } from \"./Children\";\nimport { Parent } from \"./Parent\";\n\nexport const removeChildren = (entity: Entity) => (world: World) =>\n  removeChildrenRecur(world, entity);\n\nfunction removeChildrenRecur(world: World, entity: Entity) {\n  const children = world.getComponent(entity, Children);\n\n  if (children) {\n    for (const child of children.children) {\n      world = removeChildrenRecur(world, child);\n      world = world.deleteComponent(child, Parent);\n    }\n    world = world.deleteComponent(entity, Children);\n  }\n  return world;\n}\n","let ENTITY_ID = 0;\n\nexport class Entity {\n  protected id: number;\n\n  constructor(id?: number) {\n    this.id = id || ENTITY_ID++;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  toString() {\n    return this.id;\n  }\n}\n","import { OrderedSet, Record } from \"immutable\";\n\nexport class ResourceManager<T> extends Record(\n  {\n    resources: OrderedSet(),\n    resourcesToDelete: OrderedSet(),\n    resourcesToUpdate: OrderedSet(),\n    changed: OrderedSet(),\n    deleted: OrderedSet(),\n  },\n  \"ecs.ResourceManager\"\n) {\n  setResource(resource: T) {\n    return this.set(\"resourcesToUpdate\", this.resourcesToUpdate.add(resource));\n  }\n  addResource(resource: T) {\n    return this.setResource(resource);\n  }\n  updateResource(resource: T, updateFn: (resource: T) => T) {\n    return this.setResource(updateFn(resource));\n  }\n  deleteResource(resource: T) {\n    if (this.resources.has(resource)) {\n      return this.set(\n        \"resourcesToDelete\",\n        this.resourcesToDelete.add(resource)\n      );\n    } else {\n      return this;\n    }\n  }\n  getResource(resource: T) {\n    return this.resources.has(resource) ? resource : undefined;\n  }\n  getChangedResource(resource: T) {\n    return this.changed.has(resource) ? resource : undefined;\n  }\n  changedResource(resource: T) {\n    return this.changed.has(resource);\n  }\n  getDeletedResource(resource: T) {\n    return this.deleted.has(resource) ? resource : undefined;\n  }\n  deletedResource(resource: T) {\n    return this.deleted.has(resource);\n  }\n\n  isEmpty() {\n    return this.resources.size === 0;\n  }\n  keys() {\n    return this.resources.keys() as IterableIterator<T>;\n  }\n  values() {\n    return this.resources.values() as IterableIterator<T>;\n  }\n  entries() {\n    return this.resources.entries() as IterableIterator<[T, T]>;\n  }\n\n  maintain() {\n    let updated = this;\n    for (const resource of updated.resourcesToDelete) {\n      updated = updated.set(\"resources\", updated.resources.delete(resource));\n    }\n    updated = updated.set(\"deleted\", updated.resourcesToDelete);\n    updated = updated.set(\n      \"resourcesToDelete\",\n      updated.resourcesToDelete.clear()\n    );\n    for (const resource of updated.resourcesToUpdate) {\n      updated = updated.set(\"resources\", updated.resources.add(resource));\n    }\n    updated = updated.set(\"changed\", updated.resourcesToUpdate);\n    updated = updated.set(\n      \"resourcesToUpdate\",\n      updated.resourcesToUpdate.clear()\n    );\n    return updated;\n  }\n}\n","import { Map, Record } from \"immutable\";\nimport type { IConstructor } from \"./IConstructor\";\n\nexport class ResourceClassManager<T> extends Record(\n  {\n    resources: Map<IConstructor<unknown>, unknown>(),\n    resourcesToDelete: Map<IConstructor<unknown>, unknown>(),\n    resourcesToUpdate: Map<IConstructor<unknown>, unknown>(),\n    changed: Map<IConstructor<unknown>, unknown>(),\n    deleted: Map<IConstructor<unknown>, unknown>(),\n  },\n  \"ecs.ResourceClassManager\"\n) {\n  setResource(Resource: IConstructor<T>, resource: T) {\n    return this.set(\n      \"resourcesToUpdate\",\n      this.resourcesToUpdate.set(Resource, resource)\n    );\n  }\n  addResource(resource: T) {\n    return this.setResource(\n      Object.getPrototypeOf(resource).constructor,\n      resource\n    );\n  }\n  updateResource(Resource: IConstructor<T>, updateFn: (resource: T) => T) {\n    const resource = this.getResource(Resource);\n    if (resource) {\n      return this.set(\n        \"resourcesToUpdate\",\n        this.resourcesToUpdate.set(Resource, updateFn(resource))\n      );\n    } else {\n      return this;\n    }\n  }\n  deleteResource(Resource: IConstructor<T>) {\n    const resource = this.getResource(Resource);\n    if (resource) {\n      return this.set(\n        \"resourcesToDelete\",\n        this.resourcesToDelete.set(Resource, resource)\n      );\n    } else {\n      return this;\n    }\n  }\n  getResource(Resource: IConstructor<T>): T | undefined {\n    return this.resources.get(Resource) as T;\n  }\n  hasResource(Resource: IConstructor<T>) {\n    return this.resources.has(Resource);\n  }\n  getChangedResource(Resource: IConstructor<T>): T | undefined {\n    return this.changed.get(Resource) as T;\n  }\n  changedResource(Resource: IConstructor<T>) {\n    return this.changed.has(Resource);\n  }\n  getDeletedResource(Resource: IConstructor<T>): T | undefined {\n    return this.deleted.get(Resource) as T;\n  }\n  deletedResource(Resource: IConstructor<T>) {\n    return this.deleted.has(Resource);\n  }\n\n  isEmpty() {\n    return this.resources.size === 0;\n  }\n  keys() {\n    return this.resources.keys() as IterableIterator<IConstructor<T>>;\n  }\n  values() {\n    return this.resources.values() as IterableIterator<T>;\n  }\n  entries() {\n    return this.resources.entries() as IterableIterator<[IConstructor<T>, T]>;\n  }\n\n  maintain() {\n    let updated = this;\n    for (const Resource of updated.resourcesToDelete.keys()) {\n      updated = updated.set(\"resources\", updated.resources.delete(Resource));\n    }\n    updated = updated.set(\"deleted\", updated.resourcesToDelete);\n    updated = updated.set(\n      \"resourcesToDelete\",\n      updated.resourcesToDelete.clear()\n    );\n    for (const [Resource, resource] of updated.resourcesToUpdate) {\n      updated = updated.set(\n        \"resources\",\n        updated.resources.set(Resource, resource)\n      );\n    }\n    updated = updated.set(\"changed\", updated.resourcesToUpdate);\n    updated = updated.set(\n      \"resourcesToUpdate\",\n      updated.resourcesToUpdate.clear()\n    );\n    return updated;\n  }\n}\n","import { Entity } from \"./Entity\";\nimport { Parent } from \"./hierarchy/Parent\";\nimport type { World } from \"./World\";\n\nconst noop = (builder: EntityBuilder) => builder;\n\nexport class EntityBuilder {\n  protected world: World;\n  protected entity: Entity;\n\n  constructor(world: World, entity: Entity) {\n    this.world = world.addEntity(entity);\n    this.entity = entity;\n  }\n\n  withComponent<C>(component: C) {\n    this.world = this.world.addComponent(this.entity, component);\n    return this;\n  }\n  addComponent<C>(component: C) {\n    this.world = this.world.addComponent(this.entity, component);\n    return this;\n  }\n\n  withChild(fn: (builder: EntityBuilder) => EntityBuilder = noop) {\n    const childEntity = new Entity();\n    this.world = this.world.addEntity(childEntity);\n    this.world = this.world.addComponent(\n      childEntity,\n      new Parent({ entity: this.entity })\n    );\n    const [world, _entity] = fn(\n      new EntityBuilder(this.world, childEntity)\n    ).build();\n    this.world = world;\n    return this;\n  }\n  addChild(entity: Entity) {\n    this.world = this.world.addComponent(\n      entity,\n      new Parent({ entity: this.entity })\n    );\n    return this;\n  }\n\n  build(): [world: World, entity: Entity] {\n    return [this.world, this.entity];\n  }\n}\n","import { Entity } from \"./Entity\";\nimport type { ResourceClassManager } from \"./ResourceClassManager\";\n\nexport type IChangedQuery<T> = { changed: T };\nexport type IDeletedQuery<T> = { deleted: T };\nexport type IWithoutQuery<T> = { without: T };\nexport type IOptionalQuery<T> = { optional: T };\nexport type IOneOfQuery<T> = { oneOf: T };\n\nexport function isChangedQuery<T>(value: unknown): value is IChangedQuery<T> {\n  return \"changed\" in (value as any);\n}\nexport function isDeletedQuery<T>(value: unknown): value is IDeletedQuery<T> {\n  return \"deleted\" in (value as any);\n}\nexport function isWithoutQuery<T>(value: unknown): value is IWithoutQuery<T> {\n  return \"without\" in (value as any);\n}\nexport function isOptionalQuery<T>(value: unknown): value is IOptionalQuery<T> {\n  return \"optional\" in (value as any);\n}\nexport function isOneOfQuery<T>(value: unknown): value is IOneOfQuery<T> {\n  return \"oneOf\" in (value as any);\n}\n\nexport function changed<T>(changed: T): IChangedQuery<T> {\n  return { changed };\n}\nexport function deleted<T>(deleted: T): IDeletedQuery<T> {\n  return { deleted };\n}\nexport function without<T>(without: T): IWithoutQuery<T> {\n  return { without };\n}\nexport function optional<T>(optional: T): IOptionalQuery<T> {\n  return { optional };\n}\nexport function oneOf<T>(oneOf: T): IOneOfQuery<T> {\n  return { oneOf };\n}\n\nexport type IInstanceType<T> = T extends new (...args: any[]) => infer R\n  ? R\n  : T extends (...args: any[]) => infer R\n  ? R\n  : T;\n\nexport type IAnyOfArray<T> = T extends [infer A]\n  ? A\n  : T extends [infer A, infer B]\n  ? A | B\n  : T extends [infer A, infer B, infer C]\n  ? A | B | C\n  : T extends [infer A, infer B, infer C, infer D]\n  ? A | B | C | D\n  : T extends [infer A, infer B, infer C, infer D, infer E]\n  ? A | B | C | D | E\n  : T extends [infer A, infer B, infer C, infer D, infer E, infer F]\n  ? A | B | C | D | E | F\n  : T extends [infer A, infer B, infer C, infer D, infer E, infer F, infer G]\n  ? A | B | C | D | E | F | G\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H\n    ]\n  ? A | B | C | D | E | F | G | H\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H,\n      infer I\n    ]\n  ? A | B | C | D | E | F | G | H | I\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H,\n      infer I,\n      infer J\n    ]\n  ? A | B | C | D | E | F | G | H | I | J\n  : T;\n\nexport type IQueryResult<T> = T extends [infer A]\n  ? [IQueryResult<A>]\n  : T extends [infer A, infer B]\n  ? [IQueryResult<A>, IQueryResult<B>]\n  : T extends [infer A, infer B, infer C]\n  ? [IQueryResult<A>, IQueryResult<B>, IQueryResult<C>]\n  : T extends [infer A, infer B, infer C, infer D]\n  ? [IQueryResult<A>, IQueryResult<B>, IQueryResult<C>, IQueryResult<D>]\n  : T extends [infer A, infer B, infer C, infer D, infer E]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>\n    ]\n  : T extends [infer A, infer B, infer C, infer D, infer E, infer F]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>\n    ]\n  : T extends [infer A, infer B, infer C, infer D, infer E, infer F, infer G]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>,\n      IQueryResult<G>\n    ]\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H\n    ]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>,\n      IQueryResult<G>,\n      IQueryResult<H>\n    ]\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H,\n      infer I\n    ]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>,\n      IQueryResult<G>,\n      IQueryResult<H>,\n      IQueryResult<I>\n    ]\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H,\n      infer I,\n      infer J\n    ]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>,\n      IQueryResult<G>,\n      IQueryResult<H>,\n      IQueryResult<I>,\n      IQueryResult<J>\n    ]\n  : T extends IChangedQuery<infer _>\n  ? boolean\n  : T extends IDeletedQuery<infer _>\n  ? boolean\n  : T extends IWithoutQuery<infer _>\n  ? null\n  : T extends IOptionalQuery<infer U>\n  ? IQueryResult<U> | undefined\n  : T extends IOneOfQuery<infer U>\n  ? IAnyOfArray<U>\n  : T extends Entity\n  ? Entity\n  : IInstanceType<T>;\n\nexport function runQuery<T>(\n  entity: Entity,\n  components: ResourceClassManager<unknown>,\n  query: T\n): IQueryResult<T> | undefined {\n  return runQueryInternal(entity, components, query);\n}\n\nfunction runQueryInternal(\n  entity: Entity,\n  components: ResourceClassManager<unknown>,\n  query: unknown\n): any {\n  if (Array.isArray(query)) {\n    const result = [];\n    for (const q of query) {\n      const r = runQueryInternal(entity, components, q);\n      if (r !== undefined) {\n        result.push(r);\n      } else {\n        return undefined;\n      }\n    }\n    return result;\n  } else if (isChangedQuery(query)) {\n    return components.changedResource(query.changed as any);\n  } else if (isDeletedQuery(query)) {\n    return components.deletedResource(query.deleted as any);\n  } else if (isWithoutQuery(query)) {\n    if (components.hasResource(query.without as any)) {\n      return undefined;\n    } else {\n      return null;\n    }\n  } else if (isOptionalQuery(query)) {\n    return components.getResource(query.optional as any);\n  } else if (isOneOfQuery(query)) {\n    for (const subQuery of query.oneOf as any) {\n      const subResult = runQueryInternal(entity, components, subQuery);\n      if (subResult !== undefined) {\n        return subResult;\n      }\n    }\n    return undefined;\n  } else if (query === Entity) {\n    return entity;\n  } else {\n    return components.getResource(query as any);\n  }\n}\n","import { Entity } from \"./Entity\";\nimport { ResourceManager } from \"./ResourceManager\";\nimport { ResourceClassManager } from \"./ResourceClassManager\";\nimport type { IConstructor } from \"./IConstructor\";\nimport { List, Map, Record } from \"immutable\";\nimport { EntityBuilder } from \"./EntityBuilder\";\nimport { IQueryResult, runQuery } from \"./Query\";\n\nexport enum CoreStage {\n  First = 0,\n  PreUpdate = 1,\n  Update = 2,\n  PostUpdate = 3,\n  Last = 4,\n}\n\nexport type IWorldFn = (world: World) => World;\n\nexport class World extends Record(\n  {\n    entities: new ResourceManager<Entity>(),\n    components: Map<Entity, ResourceClassManager<unknown>>(),\n    resources: new ResourceClassManager<unknown>(),\n    systems: List<ResourceManager<IWorldFn>>(),\n    commands: List<List<IWorldFn>>(),\n  },\n  \"ecs.World\"\n) {\n  addPlugin(plugin: IWorldFn) {\n    return this.addPlugins(plugin);\n  }\n  addPlugins(...plugins: IWorldFn[]) {\n    return plugins.reduce(\n      (world, plugin) => plugin(world),\n      this as World\n    ) as this;\n  }\n\n  addSystemAtStage(stage: CoreStage, system: IWorldFn) {\n    let systems = this.systems.get(stage);\n    if (!systems) {\n      systems = new ResourceManager();\n    }\n    return this.set(\n      \"systems\",\n      this.systems.set(stage, systems.addResource(system))\n    );\n  }\n  addSystem(system: IWorldFn) {\n    return this.addSystemAtStage(CoreStage.Update, system);\n  }\n  deleteSystemAtStage(stage: CoreStage, system: IWorldFn) {\n    const systems = this.systems.get(stage);\n    if (systems) {\n      return this.set(\n        \"systems\",\n        this.systems.set(stage, systems.deleteResource(system))\n      );\n    } else {\n      return this;\n    }\n  }\n  deleteSystem(system: IWorldFn) {\n    return this.deleteSystemAtStage(CoreStage.Update, system);\n  }\n\n  addResource<R>(resource: R) {\n    return this.set(\"resources\", this.resources.addResource(resource));\n  }\n  setResource<R>(Resource: IConstructor<R>, resource: R) {\n    return this.set(\n      \"resources\",\n      this.resources.setResource(Resource, resource)\n    );\n  }\n  deleteResource<R>(Resource: IConstructor<R>) {\n    return this.set(\"resources\", this.resources.deleteResource(Resource));\n  }\n  getResource<R>(Resource: IConstructor<R>): R | undefined {\n    return this.resources.getResource(Resource) as R;\n  }\n  updateResource<R>(Resource: IConstructor<R>, updateFn: (resource: R) => R) {\n    return this.set(\n      \"resources\",\n      this.resources.updateResource(Resource, updateFn as any)\n    );\n  }\n\n  addComponent<C>(entity: Entity, component: C) {\n    let components = this.components.get(entity) as ResourceClassManager<C>;\n    if (!components) {\n      components = new ResourceClassManager<C>();\n    }\n    return this.set(\n      \"components\",\n      this.components.set(entity, components.addResource(component))\n    );\n  }\n  deleteComponent<C>(entity: Entity, Component: IConstructor<C>) {\n    const components = this.components.get(entity) as ResourceClassManager<C>;\n    if (components) {\n      const newComponents = components.deleteResource(Component);\n      if (newComponents.isEmpty()) {\n        return this.set(\"components\", this.components.delete(entity));\n      } else {\n        return this.set(\n          \"components\",\n          this.components.set(entity, newComponents)\n        );\n      }\n    } else {\n      return this;\n    }\n  }\n  getComponent<C>(entity: Entity, Component: IConstructor<C>): C | undefined {\n    const components = this.components.get(entity);\n    if (components) {\n      return components.getResource(Component) as C;\n    } else {\n      return undefined;\n    }\n  }\n  updateComponent<C>(\n    entity: Entity,\n    Component: IConstructor<C>,\n    updateFn: (component: C) => C\n  ) {\n    const components = this.components.get(entity);\n    if (components) {\n      return this.set(\n        \"components\",\n        this.components.set(\n          entity,\n          components.updateResource(Component, updateFn as any)\n        )\n      );\n    } else {\n      return this;\n    }\n  }\n  setComponent<C>(entity: Entity, Component: IConstructor<C>, component: C) {\n    const components = this.components.get(entity);\n    if (components) {\n      return this.set(\n        \"components\",\n        this.components.set(\n          entity,\n          components.setResource(Component, component)\n        )\n      );\n    } else {\n      return this;\n    }\n  }\n\n  withEntity(fn: (builder: EntityBuilder) => EntityBuilder) {\n    const [world, entity] = fn(new EntityBuilder(this, new Entity())).build();\n    return world.set(\"entities\", world.entities.addResource(entity));\n  }\n  addEntity(entity: Entity) {\n    return this.set(\"entities\", this.entities.addResource(entity));\n  }\n  deleteEntity(entity: Entity) {\n    return this.set(\"entities\", this.entities.deleteResource(entity));\n  }\n\n  runCommandAtStage(stage: CoreStage, command: IWorldFn) {\n    let stageCommands = this.commands.get(stage);\n    if (!stageCommands) {\n      stageCommands = List();\n    }\n    return this.set(\n      \"commands\",\n      this.commands.set(stage, stageCommands.push(command))\n    );\n  }\n  runCommand(command: IWorldFn) {\n    this.runCommandAtStage(CoreStage.Update, command);\n    return this;\n  }\n\n  update() {\n    let updated = this;\n    updated = updated.maintain();\n    for (const stage of updated.systems) {\n      if (!stage) {\n        continue;\n      }\n      for (const system of stage.values()) {\n        updated = system(updated) as this;\n      }\n    }\n    for (const stageCommands of updated.commands) {\n      if (!stageCommands) {\n        continue;\n      }\n      for (const command of stageCommands.values()) {\n        updated = command(updated) as this;\n      }\n    }\n    updated = updated.set(\"commands\", updated.commands.clear());\n    return updated;\n  }\n\n  maintain() {\n    let updated = this;\n    for (const [entity, entityComponentResources] of updated.components) {\n      const updatedEntityComponentResources =\n        entityComponentResources.maintain();\n\n      if (updatedEntityComponentResources.isEmpty()) {\n        updated = updated.set(\"components\", updated.components.delete(entity));\n      } else {\n        updated = updated.set(\n          \"components\",\n          updated.components.set(entity, updatedEntityComponentResources)\n        );\n      }\n    }\n    updated = updated.set(\"entities\", updated.entities.maintain());\n    updated = updated.set(\"resources\", updated.resources.maintain());\n    for (const [index, stage] of updated.systems.entries()) {\n      if (!stage) {\n        continue;\n      }\n      const updatedStage = stage.maintain();\n      if (updatedStage.isEmpty()) {\n        updated = updated.set(\"systems\", updated.systems.delete(index));\n      } else {\n        updated = updated.set(\n          \"systems\",\n          updated.systems.set(index, updatedStage)\n        );\n      }\n    }\n    return updated;\n  }\n\n  *query<T extends Array<any>>(...query: T): Iterable<IQueryResult<T>> {\n    for (const [entity, components] of this.components.entries()) {\n      const result = runQuery(entity, components, query);\n      if (result !== undefined) {\n        yield result;\n      }\n    }\n  }\n\n  queryOne<T extends Array<any>>(\n    entity: Entity,\n    ...query: T\n  ): IQueryResult<T> | undefined {\n    const components = this.components.get(query[0]);\n    if (components) {\n      return runQuery(entity, components, query);\n    } else {\n      return undefined;\n    }\n  }\n}\n","import { OrderedSet } from \"immutable\";\nimport { Entity } from \"../Entity\";\nimport type { World } from \"../World\";\nimport { Children } from \"./Children\";\nimport { Parent } from \"./Parent\";\nimport { PreviousParent } from \"./PreviousParent\";\nimport { optional, without } from \"../Query\";\n\nexport function parentUpdateSystem(world: World) {\n  for (const [entity, previousParent] of world.query(\n    Entity,\n    PreviousParent,\n    without(Parent)\n  )) {\n    world = world.updateComponent(\n      previousParent.entity,\n      Children,\n      (previousChildren) =>\n        previousChildren.set(\n          \"children\",\n          previousChildren.children.delete(entity)\n        )\n    );\n    world = world.deleteComponent(entity, PreviousParent);\n  }\n\n  const newChildren: Map<Entity, Entity[]> = new Map();\n\n  for (const [entity, parent, previousParent] of world.query(\n    Entity,\n    Parent,\n    optional(PreviousParent)\n  )) {\n    const parentEntity = parent.entity;\n\n    if (previousParent) {\n      const previousParentEntity = previousParent.entity;\n\n      if (previousParentEntity === parentEntity) {\n        continue;\n      }\n\n      world = world.updateComponent(\n        previousParentEntity,\n        Children,\n        (previousChildren) =>\n          previousChildren.set(\n            \"children\",\n            previousChildren.children.delete(entity)\n          )\n      );\n\n      world = world.updateComponent(entity, PreviousParent, (previousParent) =>\n        previousParent.set(\"entity\", parentEntity)\n      );\n    } else {\n      world = world.addComponent(\n        entity,\n        new PreviousParent({ entity: parentEntity })\n      );\n    }\n\n    const parentChildren = world.getComponent(parentEntity, Children);\n    if (parentChildren) {\n      if (!parentChildren.children.includes(entity)) {\n        world = world.updateComponent(\n          parentEntity,\n          Children,\n          (parentChildren) =>\n            parentChildren.set(\"children\", parentChildren.children.add(entity))\n        );\n      }\n    } else {\n      const children = newChildren.get(parentEntity);\n      if (children) {\n        children.push(entity);\n      } else {\n        newChildren.set(parentEntity, [entity]);\n      }\n    }\n  }\n\n  for (const [parent, children] of newChildren) {\n    world = world.addComponent(\n      parent,\n      new Children({ children: OrderedSet(children) })\n    );\n  }\n\n  return world;\n}\n","import { CoreStage, World } from \"../World\";\nimport { parentUpdateSystem } from \"./parentUpdateSystem\";\n\nexport const hierarchyPlugin = () => (world: World) =>\n  world\n    .runCommandAtStage(CoreStage.First, parentUpdateSystem)\n    .addSystemAtStage(CoreStage.PostUpdate, parentUpdateSystem);\n"],"names":["Children","Record","children","OrderedSet","static","displayName","Parent","entity","PreviousParent","removeChildren","world","removeChildrenRecur","getComponent","child","deleteComponent","ENTITY_ID","Entity","constructor","id","this","getId","toString","ResourceManager","resources","resourcesToDelete","resourcesToUpdate","changed","deleted","setResource","resource","set","add","addResource","updateResource","updateFn","deleteResource","has","getResource","undefined","getChangedResource","changedResource","getDeletedResource","deletedResource","isEmpty","size","keys","values","entries","maintain","updated","delete","clear","ResourceClassManager","Map","Resource","Object","getPrototypeOf","get","hasResource","noop","builder","EntityBuilder","addEntity","withComponent","component","addComponent","withChild","fn","childEntity","_entity","build","addChild","without","optional","oneOf","runQuery","components","query","runQueryInternal","Array","isArray","result","q","r","push","value","isDeletedQuery","isWithoutQuery","isOptionalQuery","isOneOfQuery","subQuery","subResult","CoreStage","World","entities","systems","List","commands","addPlugin","plugin","addPlugins","plugins","reduce","addSystemAtStage","stage","system","addSystem","Update","deleteSystemAtStage","deleteSystem","Component","newComponents","updateComponent","setComponent","withEntity","deleteEntity","runCommandAtStage","command","stageCommands","runCommand","update","entityComponentResources","updatedEntityComponentResources","index","updatedStage","queryOne","parentUpdateSystem","previousParent","previousChildren","newChildren","parent","parentEntity","previousParentEntity","parentChildren","includes","hierarchyPlugin","First","PostUpdate"],"mappings":"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"}