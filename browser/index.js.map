{"version":3,"file":"index.js","sources":["../src/hierarchy/Children.ts","../src/hierarchy/Parent.ts","../src/hierarchy/PreviousParent.ts","../src/hierarchy/removeChildren.ts","../src/Entity.ts","../src/ResourceManager.ts","../src/ResourceClassManager.ts","../src/EntityBuilder.ts","../src/Query.ts","../src/World.ts","../src/hierarchy/parentUpdateSystem.ts","../src/hierarchy/hierarchyPlugin.ts","../node_modules/performance-now/lib/performance-now.js","../node_modules/raf/index.js","../src/loop/Loop.ts","../src/transform/math.ts","../src/transform/components.ts","../src/transform/systems.ts","../src/transform/plugins.ts"],"sourcesContent":["import { OrderedSet, Record } from \"immutable\";\nimport type { Entity } from \"../Entity\";\n\nexport class Children extends Record(\n  {\n    children: OrderedSet<Entity>(),\n  },\n  \"ecs.hierarchy.Children\"\n) {\n  static toString() {\n    return Children.displayName;\n  }\n}\n","import { Record } from \"immutable\";\nimport type { Entity } from \"../Entity\";\n\nexport class Parent extends Record(\n  {\n    entity: null as unknown as Entity,\n  },\n  \"ecs.hierarchy.Parent\"\n) {\n  static toString() {\n    return Parent.displayName;\n  }\n}\n","import { Record } from \"immutable\";\nimport type { Entity } from \"../Entity\";\n\nexport class PreviousParent extends Record(\n  {\n    entity: null as unknown as Entity,\n  },\n  \"ecs.hierarchy.PreviousParent\"\n) {\n  static toString() {\n    return PreviousParent.displayName;\n  }\n}\n","import type { Entity } from \"../Entity\";\nimport type { World } from \"../World\";\nimport { Children } from \"./Children\";\nimport { Parent } from \"./Parent\";\n\nexport const removeChildren = (entity: Entity) => (world: World) =>\n  removeChildrenRecur(world, entity);\n\nfunction removeChildrenRecur(world: World, entity: Entity) {\n  const children = world.getComponent(entity, Children);\n\n  if (children) {\n    for (const child of children.children) {\n      world = removeChildrenRecur(world, child);\n      world = world.deleteComponent(child, Parent);\n    }\n    world = world.deleteComponent(entity, Children);\n  }\n  return world;\n}\n","let ENTITY_ID = 0;\n\nexport function nextEntityId() {\n  return ENTITY_ID++;\n}\n\nexport class Entity {\n  protected id: number;\n\n  constructor(id?: number) {\n    this.id = id == undefined ? nextEntityId() : id;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  toString() {\n    return this.id;\n  }\n}\n","import { OrderedSet, Record } from \"immutable\";\n\nexport class ResourceManager<T> extends Record(\n  {\n    resources: OrderedSet(),\n    resourcesToDelete: OrderedSet(),\n    resourcesToUpdate: OrderedSet(),\n    changed: OrderedSet(),\n    deleted: OrderedSet(),\n  },\n  \"ecs.ResourceManager\"\n) {\n  setResource(resource: T) {\n    return this.set(\"resourcesToUpdate\", this.resourcesToUpdate.add(resource));\n  }\n  addResource(resource: T) {\n    return this.setResource(resource);\n  }\n  updateResource(resource: T, updateFn: (resource: T) => T) {\n    return this.setResource(updateFn(resource));\n  }\n  deleteResource(resource: T) {\n    if (this.resources.has(resource)) {\n      return this.set(\n        \"resourcesToDelete\",\n        this.resourcesToDelete.add(resource)\n      );\n    } else {\n      return this;\n    }\n  }\n  getResource(resource: T) {\n    return this.resources.has(resource) ? resource : undefined;\n  }\n  getChangedResource(resource: T) {\n    return this.changed.has(resource) ? resource : undefined;\n  }\n  changedResource(resource: T) {\n    return this.changed.has(resource);\n  }\n  getDeletedResource(resource: T) {\n    return this.deleted.has(resource) ? resource : undefined;\n  }\n  deletedResource(resource: T) {\n    return this.deleted.has(resource);\n  }\n\n  isEmpty() {\n    return this.resources.size === 0;\n  }\n  keys() {\n    return this.resources.keys() as IterableIterator<T>;\n  }\n  values() {\n    return this.resources.values() as IterableIterator<T>;\n  }\n  entries() {\n    return this.resources.entries() as IterableIterator<[T, T]>;\n  }\n\n  maintain() {\n    let updated = this;\n    for (const resource of updated.resourcesToDelete) {\n      updated = updated.set(\"resources\", updated.resources.delete(resource));\n    }\n    updated = updated.set(\"deleted\", updated.resourcesToDelete);\n    updated = updated.set(\n      \"resourcesToDelete\",\n      updated.resourcesToDelete.clear()\n    );\n    for (const resource of updated.resourcesToUpdate) {\n      updated = updated.set(\"resources\", updated.resources.add(resource));\n    }\n    updated = updated.set(\"changed\", updated.resourcesToUpdate);\n    updated = updated.set(\n      \"resourcesToUpdate\",\n      updated.resourcesToUpdate.clear()\n    );\n    return updated;\n  }\n}\n","import { Map, Record } from \"immutable\";\nimport type { IConstructor } from \"./IConstructor\";\n\nexport class ResourceClassManager<T> extends Record(\n  {\n    resources: Map<IConstructor<unknown>, unknown>(),\n    resourcesToDelete: Map<IConstructor<unknown>, unknown>(),\n    resourcesToUpdate: Map<IConstructor<unknown>, unknown>(),\n    changed: Map<IConstructor<unknown>, unknown>(),\n    deleted: Map<IConstructor<unknown>, unknown>(),\n  },\n  \"ecs.ResourceClassManager\"\n) {\n  setResource(Resource: IConstructor<T>, resource: T) {\n    return this.set(\n      \"resourcesToUpdate\",\n      this.resourcesToUpdate.set(Resource, resource)\n    );\n  }\n  addResource(resource: T) {\n    return this.setResource(\n      Object.getPrototypeOf(resource).constructor,\n      resource\n    );\n  }\n  updateResource(Resource: IConstructor<T>, updateFn: (resource: T) => T) {\n    const resource = this.getResource(Resource);\n    if (resource) {\n      return this.set(\n        \"resourcesToUpdate\",\n        this.resourcesToUpdate.set(Resource, updateFn(resource))\n      );\n    } else {\n      return this;\n    }\n  }\n  deleteResource(Resource: IConstructor<T>) {\n    const resource = this.getResource(Resource);\n    if (resource) {\n      return this.set(\n        \"resourcesToDelete\",\n        this.resourcesToDelete.set(Resource, resource)\n      );\n    } else {\n      return this;\n    }\n  }\n  getResource(Resource: IConstructor<T>): T | undefined {\n    return this.resources.get(Resource) as T;\n  }\n  hasResource(Resource: IConstructor<T>) {\n    return this.resources.has(Resource);\n  }\n  getChangedResource(Resource: IConstructor<T>): T | undefined {\n    return this.changed.get(Resource) as T;\n  }\n  changedResource(Resource: IConstructor<T>) {\n    return this.changed.has(Resource);\n  }\n  getDeletedResource(Resource: IConstructor<T>): T | undefined {\n    return this.deleted.get(Resource) as T;\n  }\n  deletedResource(Resource: IConstructor<T>) {\n    return this.deleted.has(Resource);\n  }\n\n  isEmpty() {\n    return this.resources.size === 0;\n  }\n  keys() {\n    return this.resources.keys() as IterableIterator<IConstructor<T>>;\n  }\n  values() {\n    return this.resources.values() as IterableIterator<T>;\n  }\n  entries() {\n    return this.resources.entries() as IterableIterator<[IConstructor<T>, T]>;\n  }\n\n  maintain() {\n    let updated = this;\n    for (const Resource of updated.resourcesToDelete.keys()) {\n      updated = updated.set(\"resources\", updated.resources.delete(Resource));\n    }\n    updated = updated.set(\"deleted\", updated.resourcesToDelete);\n    updated = updated.set(\n      \"resourcesToDelete\",\n      updated.resourcesToDelete.clear()\n    );\n    for (const [Resource, resource] of updated.resourcesToUpdate) {\n      updated = updated.set(\n        \"resources\",\n        updated.resources.set(Resource, resource)\n      );\n    }\n    updated = updated.set(\"changed\", updated.resourcesToUpdate);\n    updated = updated.set(\n      \"resourcesToUpdate\",\n      updated.resourcesToUpdate.clear()\n    );\n    return updated;\n  }\n}\n","import { Entity } from \"./Entity\";\nimport { Parent } from \"./hierarchy/Parent\";\nimport type { World } from \"./World\";\n\nconst noop = (builder: EntityBuilder) => builder;\n\nexport class EntityBuilder {\n  protected world: World;\n  protected entity: Entity;\n\n  constructor(world: World, entity: Entity) {\n    this.world = world.addEntity(entity);\n    this.entity = entity;\n  }\n\n  withComponent<C>(component: C) {\n    this.world = this.world.addComponent(this.entity, component);\n    return this;\n  }\n  addComponent<C>(component: C) {\n    this.world = this.world.addComponent(this.entity, component);\n    return this;\n  }\n\n  withChild(fn: (builder: EntityBuilder) => EntityBuilder = noop) {\n    const childEntity = new Entity();\n    this.world = this.world.addEntity(childEntity);\n    this.world = this.world.addComponent(\n      childEntity,\n      new Parent({ entity: this.entity })\n    );\n    const [world, _entity] = fn(\n      new EntityBuilder(this.world, childEntity)\n    ).build();\n    this.world = world;\n    return this;\n  }\n  addChild(entity: Entity) {\n    this.world = this.world.addComponent(\n      entity,\n      new Parent({ entity: this.entity })\n    );\n    return this;\n  }\n\n  build(): [world: World, entity: Entity] {\n    return [this.world, this.entity];\n  }\n}\n","import { Entity } from \"./Entity\";\nimport type { ResourceClassManager } from \"./ResourceClassManager\";\n\nexport type IChangedQuery<T> = { changed: T };\nexport type IDeletedQuery<T> = { deleted: T };\nexport type IWithoutQuery<T> = { without: T };\nexport type IOptionalQuery<T> = { optional: T };\nexport type IOneOfQuery<T> = { oneOf: T };\n\nexport function isChangedQuery<T>(value: unknown): value is IChangedQuery<T> {\n  return \"changed\" in (value as any);\n}\nexport function isDeletedQuery<T>(value: unknown): value is IDeletedQuery<T> {\n  return \"deleted\" in (value as any);\n}\nexport function isWithoutQuery<T>(value: unknown): value is IWithoutQuery<T> {\n  return \"without\" in (value as any);\n}\nexport function isOptionalQuery<T>(value: unknown): value is IOptionalQuery<T> {\n  return \"optional\" in (value as any);\n}\nexport function isOneOfQuery<T>(value: unknown): value is IOneOfQuery<T> {\n  return \"oneOf\" in (value as any);\n}\n\nexport function changed<T>(changed: T): IChangedQuery<T> {\n  return { changed };\n}\nexport function deleted<T>(deleted: T): IDeletedQuery<T> {\n  return { deleted };\n}\nexport function without<T>(without: T): IWithoutQuery<T> {\n  return { without };\n}\nexport function optional<T>(optional: T): IOptionalQuery<T> {\n  return { optional };\n}\nexport function oneOf<T extends Array<any>>(...oneOf: T): IOneOfQuery<T> {\n  return { oneOf };\n}\n\nexport type IInstanceType<T> = T extends new (...args: any[]) => infer R\n  ? R\n  : T extends (...args: any[]) => infer R\n  ? R\n  : T;\n\nexport type IAnyOfArray<T> = T extends [infer A]\n  ? A\n  : T extends [infer A, infer B]\n  ? A | B\n  : T extends [infer A, infer B, infer C]\n  ? A | B | C\n  : T extends [infer A, infer B, infer C, infer D]\n  ? A | B | C | D\n  : T extends [infer A, infer B, infer C, infer D, infer E]\n  ? A | B | C | D | E\n  : T extends [infer A, infer B, infer C, infer D, infer E, infer F]\n  ? A | B | C | D | E | F\n  : T extends [infer A, infer B, infer C, infer D, infer E, infer F, infer G]\n  ? A | B | C | D | E | F | G\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H\n    ]\n  ? A | B | C | D | E | F | G | H\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H,\n      infer I\n    ]\n  ? A | B | C | D | E | F | G | H | I\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H,\n      infer I,\n      infer J\n    ]\n  ? A | B | C | D | E | F | G | H | I | J\n  : T;\n\nexport type IQueryResult<T> = T extends [infer A]\n  ? [IQueryResult<A>]\n  : T extends [infer A, infer B]\n  ? [IQueryResult<A>, IQueryResult<B>]\n  : T extends [infer A, infer B, infer C]\n  ? [IQueryResult<A>, IQueryResult<B>, IQueryResult<C>]\n  : T extends [infer A, infer B, infer C, infer D]\n  ? [IQueryResult<A>, IQueryResult<B>, IQueryResult<C>, IQueryResult<D>]\n  : T extends [infer A, infer B, infer C, infer D, infer E]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>\n    ]\n  : T extends [infer A, infer B, infer C, infer D, infer E, infer F]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>\n    ]\n  : T extends [infer A, infer B, infer C, infer D, infer E, infer F, infer G]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>,\n      IQueryResult<G>\n    ]\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H\n    ]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>,\n      IQueryResult<G>,\n      IQueryResult<H>\n    ]\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H,\n      infer I\n    ]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>,\n      IQueryResult<G>,\n      IQueryResult<H>,\n      IQueryResult<I>\n    ]\n  : T extends [\n      infer A,\n      infer B,\n      infer C,\n      infer D,\n      infer E,\n      infer F,\n      infer G,\n      infer H,\n      infer I,\n      infer J\n    ]\n  ? [\n      IQueryResult<A>,\n      IQueryResult<B>,\n      IQueryResult<C>,\n      IQueryResult<D>,\n      IQueryResult<E>,\n      IQueryResult<F>,\n      IQueryResult<G>,\n      IQueryResult<H>,\n      IQueryResult<I>,\n      IQueryResult<J>\n    ]\n  : T extends IChangedQuery<infer _>\n  ? boolean\n  : T extends IDeletedQuery<infer _>\n  ? boolean\n  : T extends IWithoutQuery<infer _>\n  ? null\n  : T extends IOptionalQuery<infer U>\n  ? IQueryResult<U> | undefined\n  : T extends IOneOfQuery<infer U>\n  ? IQueryResult<IAnyOfArray<U>>\n  : T extends Entity\n  ? Entity\n  : IInstanceType<T>;\n\nexport function runQuery<T>(\n  entity: Entity,\n  components: ResourceClassManager<unknown>,\n  query: T\n): IQueryResult<T> | undefined {\n  return runQueryInternal(entity, components, query);\n}\n\nfunction runQueryInternal(\n  entity: Entity,\n  components: ResourceClassManager<unknown>,\n  query: unknown\n): any {\n  if (Array.isArray(query)) {\n    const result = [];\n    for (const q of query) {\n      const r = runQueryInternal(entity, components, q);\n      if (r !== undefined) {\n        result.push(r);\n      } else {\n        return undefined;\n      }\n    }\n    return result;\n  } else if (isChangedQuery(query)) {\n    return components.changedResource(query.changed as any);\n  } else if (isDeletedQuery(query)) {\n    return components.deletedResource(query.deleted as any);\n  } else if (isWithoutQuery(query)) {\n    if (components.hasResource(query.without as any)) {\n      return undefined;\n    } else {\n      return null;\n    }\n  } else if (isOptionalQuery(query)) {\n    return components.getResource(query.optional as any);\n  } else if (isOneOfQuery(query)) {\n    for (const subQuery of query.oneOf as any) {\n      const subResult = runQueryInternal(entity, components, subQuery);\n      if (subResult !== undefined) {\n        return subResult;\n      }\n    }\n    return undefined;\n  } else if (query === Entity) {\n    return entity;\n  } else {\n    return components.getResource(query as any);\n  }\n}\n","import { Entity } from \"./Entity\";\nimport { ResourceManager } from \"./ResourceManager\";\nimport { ResourceClassManager } from \"./ResourceClassManager\";\nimport type { IConstructor } from \"./IConstructor\";\nimport { List, Map, Record } from \"immutable\";\nimport { EntityBuilder } from \"./EntityBuilder\";\nimport { IQueryResult, runQuery } from \"./Query\";\n\nexport enum CoreStage {\n  First = 0,\n  PreUpdate = 1,\n  Update = 2,\n  PostUpdate = 3,\n  Last = 4,\n}\n\nexport type IWorldFn = (world: World) => World;\n\nexport class World extends Record(\n  {\n    entities: new ResourceManager<Entity>(),\n    components: Map<Entity, ResourceClassManager<unknown>>(),\n    resources: new ResourceClassManager<unknown>(),\n    systems: List<ResourceManager<IWorldFn>>(),\n    commands: List<List<IWorldFn>>(),\n  },\n  \"ecs.World\"\n) {\n  addPlugin(plugin: IWorldFn) {\n    return this.addPlugins(plugin);\n  }\n  addPlugins(...plugins: IWorldFn[]) {\n    return plugins.reduce(\n      (world, plugin) => plugin(world),\n      this as World\n    ) as this;\n  }\n\n  addSystemAtStage(stage: CoreStage, system: IWorldFn) {\n    let systems = this.systems.get(stage);\n    if (!systems) {\n      systems = new ResourceManager();\n    }\n    return this.set(\n      \"systems\",\n      this.systems.set(stage, systems.addResource(system))\n    );\n  }\n  addSystem(system: IWorldFn) {\n    return this.addSystemAtStage(CoreStage.Update, system);\n  }\n  deleteSystemAtStage(stage: CoreStage, system: IWorldFn) {\n    const systems = this.systems.get(stage);\n    if (systems) {\n      return this.set(\n        \"systems\",\n        this.systems.set(stage, systems.deleteResource(system))\n      );\n    } else {\n      return this;\n    }\n  }\n  deleteSystem(system: IWorldFn) {\n    return this.deleteSystemAtStage(CoreStage.Update, system);\n  }\n\n  addResource<R>(resource: R) {\n    return this.set(\"resources\", this.resources.addResource(resource));\n  }\n  setResource<R>(Resource: IConstructor<R>, resource: R) {\n    return this.set(\n      \"resources\",\n      this.resources.setResource(Resource, resource)\n    );\n  }\n  deleteResource<R>(Resource: IConstructor<R>) {\n    return this.set(\"resources\", this.resources.deleteResource(Resource));\n  }\n  getResource<R>(Resource: IConstructor<R>): R | undefined {\n    return this.resources.getResource(Resource) as R;\n  }\n  updateResource<R>(Resource: IConstructor<R>, updateFn: (resource: R) => R) {\n    return this.set(\n      \"resources\",\n      this.resources.updateResource(Resource, updateFn as any)\n    );\n  }\n\n  addComponent<C>(entity: Entity, component: C) {\n    let components = this.components.get(entity) as ResourceClassManager<C>;\n    if (!components) {\n      components = new ResourceClassManager<C>();\n    }\n    return this.set(\n      \"components\",\n      this.components.set(entity, components.addResource(component))\n    );\n  }\n  deleteComponent<C>(entity: Entity, Component: IConstructor<C>) {\n    const components = this.components.get(entity) as ResourceClassManager<C>;\n    if (components) {\n      const newComponents = components.deleteResource(Component);\n      if (newComponents.isEmpty()) {\n        return this.set(\"components\", this.components.delete(entity));\n      } else {\n        return this.set(\n          \"components\",\n          this.components.set(entity, newComponents)\n        );\n      }\n    } else {\n      return this;\n    }\n  }\n  getComponent<C>(entity: Entity, Component: IConstructor<C>): C | undefined {\n    const components = this.components.get(entity);\n    if (components) {\n      return components.getResource(Component) as C;\n    } else {\n      return undefined;\n    }\n  }\n  updateComponent<C>(\n    entity: Entity,\n    Component: IConstructor<C>,\n    updateFn: (component: C) => C\n  ) {\n    const components = this.components.get(entity);\n    if (components) {\n      return this.set(\n        \"components\",\n        this.components.set(\n          entity,\n          components.updateResource(Component, updateFn as any)\n        )\n      );\n    } else {\n      return this;\n    }\n  }\n  setComponent<C>(entity: Entity, Component: IConstructor<C>, component: C) {\n    const components = this.components.get(entity);\n    if (components) {\n      return this.set(\n        \"components\",\n        this.components.set(\n          entity,\n          components.setResource(Component, component)\n        )\n      );\n    } else {\n      return this;\n    }\n  }\n\n  withEntity(fn: (builder: EntityBuilder) => EntityBuilder) {\n    const [world, entity] = fn(new EntityBuilder(this, new Entity())).build();\n    return world.set(\"entities\", world.entities.addResource(entity));\n  }\n  addEntity(entity: Entity) {\n    return this.set(\"entities\", this.entities.addResource(entity));\n  }\n  deleteEntity(entity: Entity) {\n    return this.set(\"entities\", this.entities.deleteResource(entity));\n  }\n\n  runCommandAtStage(stage: CoreStage, command: IWorldFn) {\n    let stageCommands = this.commands.get(stage);\n    if (!stageCommands) {\n      stageCommands = List();\n    }\n    return this.set(\n      \"commands\",\n      this.commands.set(stage, stageCommands.push(command))\n    );\n  }\n  runCommand(command: IWorldFn) {\n    this.runCommandAtStage(CoreStage.Update, command);\n    return this;\n  }\n\n  update() {\n    let updated = this;\n    updated = updated.maintain();\n    for (const stage of updated.systems) {\n      if (!stage) {\n        continue;\n      }\n      for (const system of stage.values()) {\n        updated = system(updated) as this;\n      }\n    }\n    for (const stageCommands of updated.commands) {\n      if (!stageCommands) {\n        continue;\n      }\n      for (const command of stageCommands.values()) {\n        updated = command(updated) as this;\n      }\n    }\n    updated = updated.set(\"commands\", updated.commands.clear());\n    return updated;\n  }\n\n  maintain() {\n    let updated = this;\n    for (const [entity, entityComponentResources] of updated.components) {\n      const updatedEntityComponentResources =\n        entityComponentResources.maintain();\n\n      if (updatedEntityComponentResources.isEmpty()) {\n        updated = updated.set(\"components\", updated.components.delete(entity));\n      } else {\n        updated = updated.set(\n          \"components\",\n          updated.components.set(entity, updatedEntityComponentResources)\n        );\n      }\n    }\n    updated = updated.set(\"entities\", updated.entities.maintain());\n    updated = updated.set(\"resources\", updated.resources.maintain());\n    for (const [index, stage] of updated.systems.entries()) {\n      if (!stage) {\n        continue;\n      }\n      const updatedStage = stage.maintain();\n      if (updatedStage.isEmpty()) {\n        updated = updated.set(\"systems\", updated.systems.delete(index));\n      } else {\n        updated = updated.set(\n          \"systems\",\n          updated.systems.set(index, updatedStage)\n        );\n      }\n    }\n    return updated;\n  }\n\n  *query<T extends Array<any>>(...query: T): Iterable<IQueryResult<T>> {\n    for (const [entity, components] of this.components.entries()) {\n      const result = runQuery(entity, components, query);\n      if (result !== undefined) {\n        yield result;\n      }\n    }\n  }\n\n  queryOne<T extends Array<any>>(\n    entity: Entity,\n    ...query: T\n  ): IQueryResult<T> | undefined {\n    const components = this.components.get(entity);\n    if (components) {\n      return runQuery(entity, components, query);\n    } else {\n      return undefined;\n    }\n  }\n}\n","import { OrderedSet } from \"immutable\";\nimport { Entity } from \"../Entity\";\nimport type { World } from \"../World\";\nimport { Children } from \"./Children\";\nimport { Parent } from \"./Parent\";\nimport { PreviousParent } from \"./PreviousParent\";\nimport { optional, without } from \"../Query\";\n\nexport function parentUpdateSystem(world: World) {\n  for (const [entity, previousParent] of world.query(\n    Entity,\n    PreviousParent,\n    without(Parent)\n  )) {\n    world = world.updateComponent(\n      previousParent.entity,\n      Children,\n      (previousChildren) =>\n        previousChildren.set(\n          \"children\",\n          previousChildren.children.delete(entity)\n        )\n    );\n    world = world.deleteComponent(entity, PreviousParent);\n  }\n\n  const newChildren: Map<Entity, Entity[]> = new Map();\n\n  for (const [entity, parent, previousParent] of world.query(\n    Entity,\n    Parent,\n    optional(PreviousParent)\n  )) {\n    const parentEntity = parent.entity;\n\n    if (previousParent) {\n      const previousParentEntity = previousParent.entity;\n\n      if (previousParentEntity === parentEntity) {\n        continue;\n      }\n\n      world = world.updateComponent(\n        previousParentEntity,\n        Children,\n        (previousChildren) =>\n          previousChildren.set(\n            \"children\",\n            previousChildren.children.delete(entity)\n          )\n      );\n\n      world = world.updateComponent(entity, PreviousParent, (previousParent) =>\n        previousParent.set(\"entity\", parentEntity)\n      );\n    } else {\n      world = world.addComponent(\n        entity,\n        new PreviousParent({ entity: parentEntity })\n      );\n    }\n\n    const parentChildren = world.getComponent(parentEntity, Children);\n    if (parentChildren) {\n      if (!parentChildren.children.includes(entity)) {\n        world = world.updateComponent(\n          parentEntity,\n          Children,\n          (parentChildren) =>\n            parentChildren.set(\"children\", parentChildren.children.add(entity))\n        );\n      }\n    } else {\n      const children = newChildren.get(parentEntity);\n      if (children) {\n        children.push(entity);\n      } else {\n        newChildren.set(parentEntity, [entity]);\n      }\n    }\n  }\n\n  for (const [parent, children] of newChildren) {\n    world = world.addComponent(\n      parent,\n      new Children({ children: OrderedSet(children) })\n    );\n  }\n\n  return world;\n}\n","import { CoreStage, World } from \"../World\";\nimport { parentUpdateSystem } from \"./parentUpdateSystem\";\n\nexport const hierarchyPlugin = () => (world: World) =>\n  world\n    .runCommandAtStage(CoreStage.First, parentUpdateSystem)\n    .addSystemAtStage(CoreStage.PostUpdate, parentUpdateSystem);\n","// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    module.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    module.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(this);\n\n//# sourceMappingURL=performance-now.js.map\n","var now = require('performance-now')\n  , root = typeof window === 'undefined' ? global : window\n  , vendors = ['moz', 'webkit']\n  , suffix = 'AnimationFrame'\n  , raf = root['request' + suffix]\n  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]\n\nfor(var i = 0; !raf && i < vendors.length; i++) {\n  raf = root[vendors[i] + 'Request' + suffix]\n  caf = root[vendors[i] + 'Cancel' + suffix]\n      || root[vendors[i] + 'CancelRequest' + suffix]\n}\n\n// Some versions of FF have rAF but not cAF\nif(!raf || !caf) {\n  var last = 0\n    , id = 0\n    , queue = []\n    , frameDuration = 1000 / 60\n\n  raf = function(callback) {\n    if(queue.length === 0) {\n      var _now = now()\n        , next = Math.max(0, frameDuration - (_now - last))\n      last = next + _now\n      setTimeout(function() {\n        var cp = queue.slice(0)\n        // Clear queue here to prevent\n        // callbacks from appending listeners\n        // to the current frame's queue\n        queue.length = 0\n        for(var i = 0; i < cp.length; i++) {\n          if(!cp[i].cancelled) {\n            try{\n              cp[i].callback(last)\n            } catch(e) {\n              setTimeout(function() { throw e }, 0)\n            }\n          }\n        }\n      }, Math.round(next))\n    }\n    queue.push({\n      handle: ++id,\n      callback: callback,\n      cancelled: false\n    })\n    return id\n  }\n\n  caf = function(handle) {\n    for(var i = 0; i < queue.length; i++) {\n      if(queue[i].handle === handle) {\n        queue[i].cancelled = true\n      }\n    }\n  }\n}\n\nmodule.exports = function(fn) {\n  // Wrap in a new function to prevent\n  // `cancel` potentially being assigned\n  // to the native rAF function\n  return raf.call(root, fn)\n}\nmodule.exports.cancel = function() {\n  caf.apply(root, arguments)\n}\nmodule.exports.polyfill = function(object) {\n  if (!object) {\n    object = root;\n  }\n  object.requestAnimationFrame = raf\n  object.cancelAnimationFrame = caf\n}\n","import raf from \"raf\";\n\nexport type ILoopHandler = (ms: number) => void;\n\nexport class Loop {\n  private id: number | null = null;\n  private running = false;\n  private updateFn: ILoopHandler;\n\n  constructor(updateFn: ILoopHandler) {\n    this.updateFn = updateFn;\n  }\n\n  start = () => {\n    if (!this.running) {\n      this.running = true;\n      this.request();\n    }\n  };\n  stop() {\n    this.running = false;\n\n    if (this.id !== null) {\n      raf.cancel(this.id);\n      this.id = null;\n    }\n    return this;\n  }\n  isStopped() {\n    return this.running === false;\n  }\n\n  private run = (ms: number) => {\n    this.updateFn(ms);\n\n    if (this.running) {\n      this.request();\n    }\n    return this;\n  };\n\n  private request() {\n    this.id = raf(this.run);\n    return this;\n  }\n}\n","import { mat2d, vec2, mat4 } from \"gl-matrix\";\n\nexport const DEG_TO_RAD = Math.PI / 180;\nexport const RAD_TO_DEG = 180 / Math.PI;\nexport const HALF_PI = Math.PI * 0.5;\nexport const TAU = Math.PI * 2;\nexport const EPSILON = 0.000001;\n\nexport function composeMat2d(\n  out: mat2d,\n  position: vec2,\n  scale: vec2,\n  rotation: number\n): mat2d {\n  const sx = scale[0],\n    sy = scale[1],\n    c = Math.cos(rotation),\n    s = Math.sin(rotation);\n\n  out[0] = c * sx;\n  out[1] = s * sx;\n  out[2] = -s * sy;\n  out[3] = c * sy;\n  out[4] = position[0];\n  out[5] = position[1];\n\n  return out;\n}\n\nconst extractScale_VEC2_0 = vec2.create();\n\nexport function extractScale(out: vec2, matrix: mat2d): vec2 {\n  return vec2.set(\n    out,\n    vec2.len(vec2.set(extractScale_VEC2_0, matrix[0], matrix[1])),\n    vec2.len(vec2.set(extractScale_VEC2_0, matrix[2], matrix[3]))\n  );\n}\n\nexport function decomposeMat2d(\n  matrix: mat2d,\n  position: vec2,\n  scale: vec2\n): number {\n  vec2.set(position, matrix[4], matrix[5]);\n  extractScale(scale, matrix);\n  return getRotationFromMat2d(matrix);\n}\n\nexport function getRotationFromMat2d(matrix: mat2d): number {\n  return Math.atan2(matrix[2], matrix[0]);\n}\n\nexport function getPointFromAngle(out: vec2, angle: number) {\n  out[0] = Math.cos(angle);\n  out[1] = Math.sin(angle);\n  return out;\n}\n\nexport function getAngleFromPoint(out: vec2) {\n  const x = out[0],\n    y = out[1],\n    angle = Math.atan2(y, x);\n\n  if (y < 0) {\n    return TAU + angle;\n  } else {\n    return angle;\n  }\n}\n\nconst getTangentAngle_VEC2_0 = vec2.create();\n\nexport function getTangentAngle(vec: vec2) {\n  const tmp = vec2.copy(getTangentAngle_VEC2_0, vec),\n    tmpX = tmp[0];\n  tmp[0] = tmp[1];\n  tmp[1] = tmpX;\n  return getAngleFromPoint(tmp);\n}\n\nexport function getAngleBetweenPoints(a: vec2, b: vec2): number {\n  const sign = b[1] < a[1] ? -1 : 1;\n  return Math.acos(vec2.dot(a, b) / (vec2.len(a) * vec2.len(b))) * sign;\n}\n\nexport function sign(value: number) {\n  return value < 0 ? -1 : 1;\n}\n\nexport function angleVec2(out: vec2) {\n  return Math.atan2(out[1], out[0]);\n}\n\nexport function vec2FromAngle(out: vec2, angle: number) {\n  out[0] = Math.cos(angle);\n  out[1] = Math.sin(angle);\n  return out;\n}\n\nexport function projectPointOnAxis(out: vec2, point: vec2, axis: vec2) {\n  const squaredLength = vec2.squaredLength(axis),\n    dotProduct = vec2.dot(point, axis);\n\n  return vec2.scale(out, axis, dotProduct / squaredLength);\n}\n\nexport function radToDeg(rad: number) {\n  return rad * RAD_TO_DEG;\n}\n\nexport function degToRad(def: number) {\n  return def * DEG_TO_RAD;\n}\n\nexport function equals(a: number, b: number) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nexport function mat4FromMat2d(out: mat4, matrix: mat2d) {\n  return mat4.set(\n    out,\n    matrix[0],\n    matrix[1],\n    0.0,\n    matrix[4],\n    matrix[2],\n    matrix[3],\n    0.0,\n    matrix[5],\n    0.0,\n    0.0,\n    1.0,\n    0.0,\n    0.0,\n    0.0,\n    0.0,\n    1.0\n  );\n}\n\nexport function mat2dFromMat4(out: mat2d, matrix: mat4) {\n  return mat2d.set(\n    out,\n    matrix[0],\n    matrix[1],\n    matrix[4],\n    matrix[5],\n    matrix[13],\n    matrix[14]\n  );\n}\n","import { mat2d, mat4, quat, vec2, vec3 } from \"gl-matrix\";\nimport { Record } from \"immutable\";\nimport { composeMat2d, mat4FromMat2d, mat2dFromMat4 } from \"./math\";\n\nconst MAT2D_0 = mat2d.create();\nconst MAT4_0 = mat4.create();\n\nexport class Transform2D extends Record(\n  {\n    position: vec2.create(),\n    scale: vec2.fromValues(1, 1),\n    rotation: 0,\n  },\n  \"ecs.transform.Transform2D\"\n) {\n  static toString() {\n    return Transform2D.displayName;\n  }\n\n  is2D(): this is Transform2D {\n    return true;\n  }\n  is3D(): this is never {\n    return false;\n  }\n  getMatrix2D(out: mat2d) {\n    return composeMat2d(out, this.position, this.scale, this.rotation);\n  }\n  getMatrix(out: mat4) {\n    return mat4FromMat2d(out, this.getMatrix2D(MAT2D_0));\n  }\n}\n\nexport class Transform3D extends Record(\n  {\n    position: vec3.create(),\n    scale: vec3.fromValues(1, 1, 1),\n    rotation: quat.create(),\n  },\n  \"ecs.transform.Transform3D\"\n) {\n  static toString() {\n    return Transform3D.displayName;\n  }\n\n  is2D(): this is never {\n    return false;\n  }\n  is3D(): this is Transform3D {\n    return true;\n  }\n  getMatrix2D(out: mat2d) {\n    return mat2dFromMat4(out, this.getMatrix(MAT4_0));\n  }\n  getMatrix(out: mat4) {\n    return mat4.fromRotationTranslationScale(\n      out,\n      this.rotation,\n      this.position,\n      this.scale\n    );\n  }\n}\n\nexport class GlobalTransform2D extends Record(\n  {\n    matrix: mat2d.create(),\n  },\n  \"ecs.transform.GlobalTransform2D\"\n) {\n  static toString() {\n    return GlobalTransform2D.displayName;\n  }\n\n  is2D(): this is GlobalTransform2D {\n    return true;\n  }\n  is3D(): this is never {\n    return false;\n  }\n  setMatrix(matrix: mat2d) {\n    return this.set(\"matrix\", matrix);\n  }\n  getMatrix2D(out: mat2d) {\n    return mat2d.copy(out, this.matrix);\n  }\n  getMatrix(out: mat4) {\n    return mat4FromMat2d(out, this.getMatrix2D(MAT2D_0));\n  }\n}\n\nexport class GlobalTransform3D extends Record(\n  {\n    matrix: mat4.create(),\n  },\n  \"ecs.transform.GlobalTransform3D\"\n) {\n  static toString() {\n    return GlobalTransform3D.displayName;\n  }\n\n  is2D(): this is never {\n    return false;\n  }\n  is3D(): this is GlobalTransform3D {\n    return true;\n  }\n  setMatrix(matrix: mat4) {\n    return this.set(\"matrix\", matrix);\n  }\n  getMatrix2D(out: mat2d) {\n    return mat2dFromMat4(out, this.matrix);\n  }\n  getMatrix(out: mat4) {\n    return mat4.copy(out, this.matrix);\n  }\n}\n","import { mat2d, mat4 } from \"gl-matrix\";\nimport { Entity } from \"../Entity\";\nimport { Children, Parent } from \"../hierarchy\";\nimport type { World } from \"../World\";\nimport {\n  GlobalTransform2D,\n  GlobalTransform3D,\n  Transform2D,\n  Transform3D,\n} from \"./components\";\nimport { changed, oneOf, without } from \"../Query\";\n\nexport function syncSimpleTransforms(world: World) {\n  for (const [entity, transform, globalTransform] of world.query(\n    Entity,\n    Transform3D,\n    GlobalTransform3D,\n    without(Parent),\n    without(Children)\n  )) {\n    world = world.setComponent(\n      entity,\n      GlobalTransform3D,\n      globalTransform.set(\"matrix\", transform.getMatrix(globalTransform.matrix))\n    );\n  }\n  for (const [entity, transform, globalTransform] of world.query(\n    Entity,\n    Transform2D,\n    GlobalTransform2D,\n    without(Parent),\n    without(Children)\n  )) {\n    world = world.setComponent(\n      entity,\n      GlobalTransform2D,\n      globalTransform.set(\n        \"matrix\",\n        transform.getMatrix2D(globalTransform.matrix)\n      )\n    );\n  }\n  return world;\n}\n\nconst MAT2D_0 = mat2d.create();\nconst MAT2D_1 = mat2d.create();\nconst MAT4_0 = mat4.create();\nconst MAT4_1 = mat4.create();\n\nexport function transformSystem(world: World) {\n  for (const [\n    entity,\n    transform,\n    children,\n    transform2DChanged,\n    transform3DChanged,\n    childrenChanged,\n    globalTransform,\n  ] of world.query(\n    Entity,\n    oneOf(Transform2D, Transform3D),\n    Children,\n    changed(Transform2D),\n    changed(Transform3D),\n    changed(Children),\n    oneOf(GlobalTransform2D, GlobalTransform3D),\n    without(Parent)\n  )) {\n    if (transform2DChanged || transform3DChanged) {\n      if (globalTransform.is3D()) {\n        world = world.updateComponent(\n          entity,\n          GlobalTransform3D,\n          (globalTransform) =>\n            globalTransform.setMatrix(transform.getMatrix(mat4.create()))\n        );\n      } else {\n        world = world.updateComponent(\n          entity,\n          GlobalTransform2D,\n          (globalTransform) =>\n            globalTransform.setMatrix(transform.getMatrix2D(mat2d.create()))\n        );\n      }\n    }\n\n    const parentChanged =\n      transform2DChanged || transform3DChanged || childrenChanged;\n\n    for (const child of children.children) {\n      world = propagateRecursive(\n        world,\n        entity,\n        globalTransform,\n        child,\n        parentChanged\n      );\n    }\n  }\n\n  return world;\n}\n\nfunction propagateRecursive(\n  world: World,\n  expectedParent: Entity,\n  parentGlobalTransform: GlobalTransform2D | GlobalTransform3D,\n  entity: Entity,\n  parentChanged: boolean\n) {\n  const actualParent = world.getComponent(entity, Parent);\n\n  if (!actualParent || actualParent.entity !== expectedParent) {\n    throw new Error(\n      \"Malformed hierarchy. This probably means that your hierarchy has been improperly maintained, or contains a cycle\"\n    );\n  }\n\n  let globalTransform: GlobalTransform2D | GlobalTransform3D;\n  const childTransformResult = world.queryOne(\n    entity,\n    oneOf(Transform2D, Transform3D),\n    changed(Transform2D),\n    changed(Transform3D),\n    oneOf(GlobalTransform2D, GlobalTransform3D)\n  );\n  if (childTransformResult) {\n    const [\n      childTransform,\n      child2DChanged,\n      child3DChanged,\n      childGlobalTransform,\n    ] = childTransformResult;\n\n    if (child2DChanged || child3DChanged || parentChanged) {\n      if (childGlobalTransform.is3D()) {\n        globalTransform = childGlobalTransform.setMatrix(\n          mat4.mul(\n            childGlobalTransform.matrix,\n            parentGlobalTransform.getMatrix(MAT4_0),\n            childTransform.getMatrix(MAT4_1)\n          )\n        );\n        world = world.setComponent(entity, GlobalTransform3D, globalTransform);\n      } else {\n        globalTransform = childGlobalTransform.setMatrix(\n          mat2d.mul(\n            childGlobalTransform.matrix,\n            parentGlobalTransform.getMatrix2D(MAT2D_0),\n            childTransform.getMatrix2D(MAT2D_1)\n          )\n        );\n        world = world.setComponent(entity, GlobalTransform2D, globalTransform);\n      }\n    } else {\n      globalTransform = childGlobalTransform;\n    }\n  } else {\n    return world;\n  }\n\n  const childChildrenResult = world.queryOne(\n    entity,\n    Children,\n    changed(Children),\n    Parent,\n    oneOf(GlobalTransform2D, GlobalTransform3D)\n  );\n  if (childChildrenResult) {\n    const [childChildren, childChildrenChanged] = childChildrenResult;\n\n    const childChanged = childChildrenChanged || parentChanged;\n\n    for (const child of childChildren.children) {\n      world = propagateRecursive(\n        world,\n        entity,\n        globalTransform,\n        child,\n        childChanged\n      );\n    }\n  }\n\n  return world;\n}\n","import { CoreStage, World } from \"../World\";\nimport { syncSimpleTransforms, transformSystem } from \"./systems\";\n\nexport const transformPlugin = () => (world: World) =>\n  world\n    .addSystemAtStage(CoreStage.PreUpdate, syncSimpleTransforms)\n    .addSystemAtStage(CoreStage.PreUpdate, transformSystem);\n"],"names":["Children","Record","children","OrderedSet","static","displayName","Parent","entity","PreviousParent","removeChildren","world","removeChildrenRecur","getComponent","child","deleteComponent","ENTITY_ID","Entity","constructor","id","this","undefined","getId","toString","ResourceManager","resources","resourcesToDelete","resourcesToUpdate","changed","deleted","setResource","resource","set","add","addResource","updateResource","updateFn","deleteResource","has","getResource","getChangedResource","changedResource","getDeletedResource","deletedResource","isEmpty","size","keys","values","entries","maintain","updated","delete","clear","ResourceClassManager","Map","Resource","Object","getPrototypeOf","get","hasResource","noop","builder","EntityBuilder","addEntity","withComponent","component","addComponent","withChild","fn","childEntity","_entity","build","addChild","without","optional","oneOf","runQuery","components","query","runQueryInternal","Array","isArray","result","q","r","push","value","isDeletedQuery","isWithoutQuery","isOptionalQuery","isOneOfQuery","subQuery","subResult","CoreStage","World","entities","systems","List","commands","addPlugin","plugin","addPlugins","plugins","reduce","addSystemAtStage","stage","system","addSystem","Update","deleteSystemAtStage","deleteSystem","Component","newComponents","updateComponent","setComponent","withEntity","deleteEntity","runCommandAtStage","command","stageCommands","runCommand","update","entityComponentResources","updatedEntityComponentResources","index","updatedStage","queryOne","parentUpdateSystem","previousParent","previousChildren","newChildren","parent","parentEntity","previousParentEntity","parentChildren","includes","hierarchyPlugin","First","PostUpdate","getNanoSeconds","hrtime","loadTime","moduleLoadTime","nodeLoadTime","upTime","performance","now","performanceNowModule","exports","process","hr","uptime","Date","getTime","call","require$$0","root","window","global","vendors","suffix","raf","caf","i","length","last","queue","callback","_now","next","Math","max","setTimeout","cp","slice","cancelled","e","round","handle","rafModule","raf_1","cancel","apply","arguments","polyfill","object","requestAnimationFrame","cancelAnimationFrame","Loop","running","start","request","run","ms","stop","isStopped","mat4FromMat2d","out","matrix","mat4","mat2dFromMat4","mat2d","vec2","create","MAT2D_0","MAT4_0","Transform2D","position","scale","fromValues","rotation","is2D","is3D","getMatrix2D","sx","sy","c","cos","s","sin","composeMat2d","getMatrix","Transform3D","vec3","quat","fromRotationTranslationScale","GlobalTransform2D","setMatrix","copy","GlobalTransform3D","syncSimpleTransforms","transform","globalTransform","MAT2D_1","MAT4_1","transformSystem","transform2DChanged","transform3DChanged","childrenChanged","parentChanged","propagateRecursive","expectedParent","parentGlobalTransform","actualParent","Error","childTransformResult","childTransform","child2DChanged","child3DChanged","childGlobalTransform","mul","childChildrenResult","childChildren","childChildrenChanged","childChanged","transformPlugin","PreUpdate"],"mappings":"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"}